###### custom functions
# Define.Var = A,0.1
# Define.Func = ABC@{[(A*PHI<1>)]}@
# default field variable: "PHI", "dPHI_dt", "lap_PHI", "PHI_X", "dPHI_X_dt", "X", "dX_dt", "T", "dT_dt", "lap_T", "P", "dP_dt", "lap_P", "PHI_P", "dPHI_P_dt", "lap_PHI_P"
# default functions		: "pow", "sqrt", "abs", "exp", "ln", "log", "sin", "cos", "tan", "asin", "acos", "atan"

InputFile.debug = true

Solver.Mesh.Nx = 64
Solver.Mesh.Ny = 64
Solver.Mesh.Nz = 1

Solver.Loop.vts_output_step = 100

Solver.Phases = {[(E_trode),()],[(E_trolyte),()]}
Solver.Comps = ()

# .matrix = {[(phi_index),(phi_name),(phi_comp_0_value, phi_comp_1_value, ... )],[(total_comp_0_value, total_comp_1_value, ... )],[(temp_value)]} 
Preprocess.Microstructure.matrix = {[(0),(E_trolyte),()],[()],[(0.0)]}
Preprocess.Microstructure.geometry_layer_number = 1
# .property = (phi_index, phi_name, geometry_type, rotation_gauge, reverse_region) 
#              geometry_type  : 0 - None, 1 - Ellipsoid, 2 - Polyhedron 
#              rotation_gauge : 0 - XYX, 1 - XZX, 2 - YXY, 3 - YZY, 4  - ZXZ, 5  - ZYZ 
#                               6 - XYZ, 7 - XZY, 8 - YXZ, 9 - YZX, 10 - ZXY, 11 - ZYX 
Preprocess.Microstructure.geometry_layer_0.property = (1,E_trode,1,1,false)
Preprocess.Microstructure.geometry_layer_0.ellipsoid = [(32,32,0),(5,5,0),(0,0,0)]
Preprocess.Microstructure.geometry_layer_0.phi = 1.000000
Preprocess.Microstructure.geometry_layer_0.is_normalized = true

# Postprocess.PhysicalFields.electric = 0 - NONE, 1 - EXPLICITE_DIFFERENCE, , 2 - EXPLICITE_FOURIER_SPECTRAL, 3 - IMPLICIT_FOURIER_SPECTRAL 
Postprocess.PhysicalFields.electric = 1
Modules.ElectricField.conductivity = (1.0,1.0)
Modules.ElectricField.threshold = 0.9
Modules.ElectricField.BackGround.conductivity = 1.0
# Modules.ElectricField.fix_phi = [(phi_name, elec_potential), ... ] 
Modules.ElectricField.fix_phi = [(E_trode,0.0)]
Modules.ElectricField.accuracy = 1e-6
Modules.ElectricField.max_iteration_steps = 10000
Modules.ElectricField.debug = true
Modules.ElectricField.Debug.output_steps = 1
# Modules.ElectricField.fix_boundary.value = (x_down,x_up,y_down,y_up,z_down,z_up) 
Modules.ElectricField.fix_boundary.type = (true,true,true,true,false,false)
Modules.ElectricField.fix_boundary.value = (1,1,1,1,0,0)
